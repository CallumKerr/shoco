#!/usr/bin/python2

import fileinput
import collections

TABLE_C = """#ifdef _SHOCO_INTERNAL
/*
This file was generated by 'generate_successor_table.py',
so don't edit this by hand. Also, do not include this file
anywhere. It is internal to 'shoco.c'. Include 'shoco.h'
if you want to use shoco in your project.
*/

static const char chrs[16] = {{
    {}
}};

static const char successors[16][8] = {{
    {}
}};

static const signed char chrs_reversed[128] = {{
    {}
}};

static const signed char successors_reversed[16][16] = {{
    {}
}};
#endif
"""


def bigrams(sequence):
    sequence = iter(sequence)
    last = next(sequence)
    for item in sequence:
        yield last, item
        last = item


def format_int_line(items):
    return", ".join(["{}".format(k) for k in items])


def format_chr_line(items):
    return", ".join(["'{}'".format(k) for k in items])


def main():
    successors = collections.OrderedDict()
    bigram_counter = collections.Counter()

    for line in fileinput.input():
        for bg in bigrams(line.strip()):
            bigram_counter[bg] += 1

    for bg, count in bigram_counter.most_common():
        a, b = bg
        try:
            if ord(a) & 0x80:
                continue
        except TypeError:
            continue
        successors[a] = []
        if len(successors) >= 16:
            break

    for bg, count in bigram_counter.most_common():
        a, b = bg
        try:
            if ord(a) & 0x80:
                continue
        except TypeError:
            continue

        if a not in successors:
            continue

        elif len(successors[a]) < 8:
            if b in successors:
                successors[a].append(b)

        if len(successors) == 16:
            if sum(map(len, successors.values())) == 128:  # 8 * 16
                break

    chrs_formated = format_chr_line(successors.keys())
    successors_formated = ",\n    ".join(format_chr_line(l) for l in successors.values())
    chrs_indices = collections.OrderedDict(zip(successors.keys(), range(16)))

    chrs_reversed = [chrs_indices.get(chr(i), -1) for i in range(128)]
    chrs_reversed_formated = format_int_line(chrs_reversed)
    successors_reversed = collections.OrderedDict()
    for char, successor_list in successors.items():
        successors_reversed[char] = [None] * 16
        s_indices = collections.OrderedDict(zip(successor_list, range(16)))
        for i, s in enumerate(successors.keys()):
            successors_reversed[char][i] = s_indices.get(s, -1)



    #print successors_reversed
    successors_reversed_formated = ",\n    ".join(format_int_line(l) for l in successors_reversed.values())
    #print successors_reversed_formated
    print TABLE_C.format(chrs_formated,
                         successors_formated,
                         chrs_reversed_formated,
                         successors_reversed_formated)

if __name__ == "__main__":
    main()
