#!/usr/bin/python2

import fileinput
import collections

TABLE_C = """
/* This file was generated by 'generate_successor_table.py',
   so don't edit this by hand. */
const char chrs[16] = {{
    {}
}};

const char successors[16][8] = {{
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},

    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {}
}};

const int chrs_reversed[128] = {{
    {}
}};
"""


def bigrams(sequence):
    sequence = iter(sequence)
    last = next(sequence)
    for item in sequence:
        yield last, item
        last = item


def format_int_line(items):
    return", ".join(["{}".format(k) for k in items])


def format_chr_line(items):
    return", ".join(["'{}'".format(k) for k in items])


def main():
    successors = collections.OrderedDict()
    bigram_counter = collections.Counter()

    for line in fileinput.input():
        for bg in bigrams(line.strip()):
            bigram_counter[bg] += 1

    for bg, count in bigram_counter.most_common():
        a, b = bg
        try:
            if ord(a) & 0x80:
                continue
        except TypeError:
            continue

        if a not in successors:
            if len(successors) < 16:
                successors[a] = [b]
        elif len(successors[a]) < 8:
            successors[a].append(b)

        if len(successors) == 16:
            if sum(map(len, successors.values())) == 128:  # 8 * 16
                break

    chrs_formated = format_chr_line(successors.keys())
    successors_formated = [format_chr_line(l) for l in successors.values()]
    chrs_indices = dict(zip(successors.keys(), range(16)))

    chrs_reversed = [chrs_indices.get(chr(i), -1) for i in range(128)]
    chrs_reversed_formated = format_int_line(chrs_reversed)
    vals = [chrs_formated] + successors_formated + [chrs_reversed_formated]
    print TABLE_C.format(*vals)

if __name__ == "__main__":
    main()
